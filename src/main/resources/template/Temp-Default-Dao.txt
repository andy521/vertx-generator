{*package*}

import java.util.List;

{*import*}

import io.vertx.core.AbstractVerticle;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.SQLConnection;

public class {*daoName*} extends AbstractVerticle {
	JDBCClient jdbcClient;
	{*sqlName*}  {*sqlObjName*};

	@Override
	public void start() throws Exception {
		jdbcClient = JDBCClient.createShared(vertx, config());
		{*sqlObjName*} = new {*sqlName*}();
		vertx.eventBus().consumer("{*bsGetCount*}", this::{*funGetCount*});
		vertx.eventBus().consumer("{*bsSelectAll*}", this::{*funSelectAll*});
		vertx.eventBus().consumer("{*bsSelectAllByPage*}", this::{*funSelectAllByPage*});
		vertx.eventBus().consumer("{*bsSelectObj*}", this::{*funSelectObj*});
		vertx.eventBus().consumer("{*bsSelectId*}", this::{*funSelectId*});
		vertx.eventBus().consumer("{*bsInsert*}", this::{*funInsert*});
		vertx.eventBus().consumer("{*bsUpdate*}", this::{*funUpdate*});
		vertx.eventBus().consumer("{*bsDelete*}", this::{*funDelete*});
	    {*//*}vertx.eventBus().consumer("{*bsInsertBatch*}", this::{*funInsertBatch*});
	}
	
	/**
	 * 获得{*className*}数据总行数,接收SqlAssist的Json字符串,查询全部可以传入null
	 * 
	 * @param msg
	 */
	public void {*funGetCount*}(Message<String> msg) {
		SqlAssist assist = null;
		if (msg.body() != null) {
			assist = Json.decodeValue(msg.body(), SqlAssist.class);
		}
		SqlAndParams sp = {*sqlObjName*}.getCount(assist);
		jdbcClient.queryWithParams(sp.getSql(), sp.getParams(), res -> {
			if (res.succeeded()) {
				Long result = res.result().getResults().get(0).getLong(0);
				msg.reply(result);
			} else {
				// TODO 做异常处理
				// LOG.error("执行查询{*className*}数据总行数-->失败:" + res.cause());
				// msg.fail(500, res.cause().toString());
			}
		});
	}
	
		/**
	 * 获得所有{*className*}通过分页,接收SqlAssist的Json字符串,查询全部可以传入null
	 * 
	 * @param msg
	 */
	public void {*funSelectAllByPage*}(Message<String> msg) {
		SqlAssist assist = null;
		if (msg.body() != null) {
			assist = Json.decodeValue(msg.body(), SqlAssist.class);
		}
		SqlAndParams sp = {*sqlObjName*}.selectAllByPage(assist);
		jdbcClient.queryWithParams(sp.getBatchSql().get(0), sp.getBatchParams().get(0), getCount -> {
			if (getCount.succeeded()) {
				// 返回结果
				JsonObject result = new JsonObject();
				// 获得数据总行数
				Long count = getCount.result().getResults().get(0).getLong(0);
				// 执行获得数据结果
				jdbcClient.queryWithParams(sp.getBatchSql().get(1), sp.getBatchParams().get(1), getData -> {
					if (getData.succeeded()) {
						List<JsonObject> rows = getData.result().getRows();// 获得数据
						result.put("count", count);
						result.put("data", new JsonArray(rows));
						msg.reply(result);
					} else {
						// TODO 做异常处理
						// LOG.error("执行获得所有{*className*}通过分页--获取数据-->失败:" +
						// getCount.cause());
						msg.fail(500, getData.cause().toString());
					}
				});
			} else {
				// TODO 做异常处理
				// LOG.error("执行获得所有{*className*}通过分页--获取总行数-->失败:" +
				// getCount.cause());
				msg.fail(500, getCount.cause().toString());
			}
		});
	}
	
	/**
	 * 获得所有{*className*},接收SqlAssist的Json字符串,查询全部可以传入null
	 * 
	 * @param msg
	 */
	public void {*funSelectAll*}(Message<String> msg) {
		SqlAssist assist = null;
		if (msg.body() != null) {
			assist = Json.decodeValue(msg.body(), SqlAssist.class);
		}
		SqlAndParams sp = {*sqlObjName*}.selectAll(assist);
		jdbcClient.queryWithParams(sp.getSql(), sp.getParams(), res -> {
			if (res.succeeded()) {
				List<JsonObject> rows = res.result().getRows();
				msg.reply(new JsonArray(rows));
			} else {
				// TODO 做异常处理
				// LOG.error("执行查询所有{*className*}-->失败:" + res.cause());
				// msg.fail(500, res.cause().toString());
			}
		});
	}
	
	/**
	 * 获得通过{*className*}查询{*className*},可用于登录等
	 * 
	 * @param msg
	 */
	public void {*funSelectObj*}(Message<JsonObject> msg) {
		if (msg.body() != null) {
			SqlAndParams sp = {*sqlObjName*}.selectByObj(msg.body());
			jdbcClient.queryWithParams(sp.getSql(), sp.getParams(), res -> {
				if (res.succeeded()) {
					List<JsonObject> rows = res.result().getRows();
					msg.reply(new JsonArray(rows));
				} else {
					// TODO 做异常处理
					// LOG.error("执行通过{*className*}查询{*className*}-->失败:" +
					// res.cause());
				}
			});
		} else {
			// TODO 做异常处理
			// LOG.debug("执行通过{*className*}查询{*className*}-->失败:对象不能为空");
			// msg.fail(412, "对象不能为空");
		}
	}
	
	/**
	 * 通过主键查询出{*className*}
	 * 
	 * @param msg
	 */
	public void {*funSelectId*}(Message<Object> msg) {
		if (msg.body() != null) {
			SqlAndParams sp = {*sqlObjName*}.selectById(msg.body());
			jdbcClient.queryWithParams(sp.getSql(), sp.getParams(), res -> {
				if (res.succeeded()) {
					JsonObject result = null;
					List<JsonObject> rows = res.result().getRows();
					if (rows.size() > 0) {
						result = rows.get(0);
					}
					msg.reply(result);
				} else {
					// TODO 做异常处理
					// LOG.error("执行通过主键查询{*className*}-->失败:" + res.cause());
				}
			});
		} else {
			// TODO 做异常处理
			// LOG.debug("执行通过主键查询{*className*}-->失败:id不能为空!");
			// msg.fail(412, "id不能为空!");
		}
	}
	
	/**
	 * 将{*className*}保存到数据库
	 * 
	 * @param msg
	 */
	public void {*funInsert*}(Message<JsonObject> msg) {
		if (msg.body() != null) {
			SqlAndParams sp = {*sqlObjName*}.insertNonEnpty(msg.body());
			jdbcClient.updateWithParams(sp.getSql(), sp.getParams(), res -> {
				if (res.succeeded()) {
					int result = res.result().getUpdated();
					msg.reply(result);
				} else {
					// TODO 做异常处理
					// LOG.error("执行将{*className*}保存到数据库-->失败:" + res.cause());
					msg.fail(500, res.cause().toString());
				}
			});
		} else {
			msg.fail(412, "对象不能为空");
		}
	}
	
	/**
	 * 将通过主键更新{*className*}
	 * 
	 * @param msg
	 */
	public void {*funUpdate*}(Message<JsonObject> msg) {
		if (msg.body() != null) {
			SqlAndParams sp = {*sqlObjName*}.updateNonEmptyById(msg.body());
			jdbcClient.updateWithParams(sp.getSql(), sp.getParams(), res -> {
				if (res.succeeded()) {
					int result = res.result().getUpdated();
					msg.reply(result);
				} else {
					// TODO 做异常处理
					// LOG.error("执行通过主键更新{*className*}-->失败:" + res.cause());
					msg.fail(500, res.cause().toString());
				}
			});
		} else {
			msg.fail(412, "对象不能为空");
		}
	}
	
	/**
	 * 通过主键将{*className*}删除
	 * 
	 * @param msg
	 */
	public void {*funDelete*}(Message<Object> msg) {
		if (msg.body() != null) {
			SqlAndParams sp = {*sqlObjName*}.deleteById(msg.body());
			jdbcClient.updateWithParams(sp.getSql(), sp.getParams(), res -> {
				if (res.succeeded()) {
					int result = res.result().getUpdated();
					msg.reply(result);
				} else {
					// TODO 做异常处理
					// LOG.error("执行通过id删除{*className*}-->失败:" + res.cause());
					msg.fail(500, res.cause().toString());
				}
			});
		} else {
			msg.fail(412, "id不能为空");
		}
	}
	
{*daoAdd*}
}
	